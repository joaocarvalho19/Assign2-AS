[2022-05-12 17:03:08,254] DEBUG preRegister called. Server=com.sun.jmx.mbeanserver.JmxMBeanServer@77ec78b9, name=log4j:logger=kafka.controller (kafka.controller)
[2022-05-12 17:03:17,508] INFO [ControllerEventThread controllerId=2] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-12 17:03:17,569] INFO [Controller id=2] 2 successfully elected as the controller. Epoch incremented to 1 and epoch zk version is now 1 (kafka.controller.KafkaController)
[2022-05-12 17:03:17,578] INFO [Controller id=2] Creating FeatureZNode at path: /feature with contents: FeatureZNode(Enabled,Features{}) (kafka.controller.KafkaController)
[2022-05-12 17:03:17,607] INFO [ControllerEventThread controllerId=5] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-12 17:03:17,655] DEBUG [Controller id=5] Broker 2 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2022-05-12 17:03:17,668] INFO [Controller id=2] Registering handlers (kafka.controller.KafkaController)
[2022-05-12 17:03:17,674] INFO [Controller id=2] Deleting log dir event notifications (kafka.controller.KafkaController)
[2022-05-12 17:03:17,679] INFO [Controller id=2] Deleting isr change notifications (kafka.controller.KafkaController)
[2022-05-12 17:03:17,687] INFO [Controller id=2] Initializing controller context (kafka.controller.KafkaController)
[2022-05-12 17:03:17,703] INFO [ControllerEventThread controllerId=1] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-12 17:03:17,732] DEBUG [Controller id=1] Broker 2 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2022-05-12 17:03:17,740] INFO [Controller id=2] Initialized broker epochs cache: Map(2 -> 107, 5 -> 108, 4 -> 113, 1 -> 110, 3 -> 115, 0 -> 114) (kafka.controller.KafkaController)
[2022-05-12 17:03:17,759] INFO [ControllerEventThread controllerId=4] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-12 17:03:17,766] DEBUG [Controller id=2] Register BrokerModifications handler for Set(2, 5, 4, 1, 3, 0) (kafka.controller.KafkaController)
[2022-05-12 17:03:17,796] DEBUG [Controller id=4] Broker 2 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2022-05-12 17:03:17,801] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 4 (kafka.controller.ControllerChannelManager)
[2022-05-12 17:03:17,828] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 5 (kafka.controller.ControllerChannelManager)
[2022-05-12 17:03:17,837] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 2 (kafka.controller.ControllerChannelManager)
[2022-05-12 17:03:17,838] INFO [ControllerEventThread controllerId=0] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-12 17:03:17,842] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2022-05-12 17:03:17,851] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2022-05-12 17:03:17,858] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 3 (kafka.controller.ControllerChannelManager)
[2022-05-12 17:03:17,867] INFO [Controller id=2] Currently active brokers in the cluster: Set(2, 5, 4, 1, 3, 0) (kafka.controller.KafkaController)
[2022-05-12 17:03:17,867] DEBUG [Controller id=0] Broker 2 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2022-05-12 17:03:17,868] INFO [Controller id=2] Currently shutting brokers in the cluster: Set() (kafka.controller.KafkaController)
[2022-05-12 17:03:17,869] INFO [Controller id=2] Current list of topics in the cluster: Set() (kafka.controller.KafkaController)
[2022-05-12 17:03:17,872] INFO [Controller id=2] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2022-05-12 17:03:17,893] INFO [Controller id=2] List of topics to be deleted:  (kafka.controller.KafkaController)
[2022-05-12 17:03:17,893] INFO [Controller id=2] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2022-05-12 17:03:17,899] INFO [Controller id=2] Initializing topic deletion manager (kafka.controller.KafkaController)
[2022-05-12 17:03:17,899] INFO [Topic Deletion Manager 2] Initializing manager with initial deletions: Set(), initial ineligible deletions: Set() (kafka.controller.TopicDeletionManager)
[2022-05-12 17:03:17,901] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2022-05-12 17:03:17,901] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2022-05-12 17:03:17,901] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2022-05-12 17:03:17,901] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2022-05-12 17:03:17,901] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2022-05-12 17:03:17,901] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2022-05-12 17:03:17,903] INFO [Controller id=2] Sending update metadata request (kafka.controller.KafkaController)
[2022-05-12 17:03:17,914] INFO [ControllerEventThread controllerId=3] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-12 17:03:17,957] INFO [ReplicaStateMachine controllerId=2] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2022-05-12 17:03:17,977] DEBUG [Controller id=3] Broker 2 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2022-05-12 17:03:17,985] INFO [ReplicaStateMachine controllerId=2] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2022-05-12 17:03:17,989] INFO [RequestSendThread controllerId=2] Controller 2 connected to LAPTOP-S01N1QNU.mshome.net:9096 (id: 4 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2022-05-12 17:03:17,991] INFO [RequestSendThread controllerId=2] Controller 2 connected to LAPTOP-S01N1QNU.mshome.net:9094 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2022-05-12 17:03:17,991] INFO [RequestSendThread controllerId=2] Controller 2 connected to LAPTOP-S01N1QNU.mshome.net:9095 (id: 3 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2022-05-12 17:03:17,994] INFO [RequestSendThread controllerId=2] Controller 2 connected to LAPTOP-S01N1QNU.mshome.net:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2022-05-12 17:03:17,994] INFO [RequestSendThread controllerId=2] Controller 2 connected to LAPTOP-S01N1QNU.mshome.net:9093 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2022-05-12 17:03:17,996] INFO [RequestSendThread controllerId=2] Controller 2 connected to LAPTOP-S01N1QNU.mshome.net:9097 (id: 5 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2022-05-12 17:03:18,004] INFO [ReplicaStateMachine controllerId=2] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2022-05-12 17:03:18,013] DEBUG [ReplicaStateMachine controllerId=2] Started replica state machine with initial state -> Map() (kafka.controller.ZkReplicaStateMachine)
[2022-05-12 17:03:18,013] INFO [PartitionStateMachine controllerId=2] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2022-05-12 17:03:18,015] INFO [PartitionStateMachine controllerId=2] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2022-05-12 17:03:18,024] DEBUG [PartitionStateMachine controllerId=2] Started partition state machine with initial state -> Map() (kafka.controller.ZkPartitionStateMachine)
[2022-05-12 17:03:18,024] INFO [Controller id=2] Ready to serve as the new controller with epoch 1 (kafka.controller.KafkaController)
[2022-05-12 17:03:18,067] INFO [Controller id=2] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2022-05-12 17:03:18,067] INFO [Controller id=2] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2022-05-12 17:03:18,069] INFO [Controller id=2] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2022-05-12 17:03:18,069] INFO [Controller id=2] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2022-05-12 17:03:18,078] INFO [Controller id=2] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2022-05-12 17:03:18,118] INFO [Controller id=2] Starting the controller scheduler (kafka.controller.KafkaController)
[2022-05-12 17:03:19,958] INFO [Controller id=2] New topics: [Set(Sensor)], deleted topics: [Set()], new partition replica assignment [Set(TopicIdReplicaAssignment(Sensor,Some(uRASlC4lRCGDI0SN1ufO9w),Map(Sensor-1 -> ReplicaAssignment(replicas=1,3,0, addingReplicas=, removingReplicas=), Sensor-4 -> ReplicaAssignment(replicas=0,4,1, addingReplicas=, removingReplicas=), Sensor-0 -> ReplicaAssignment(replicas=4,2,3, addingReplicas=, removingReplicas=), Sensor-5 -> ReplicaAssignment(replicas=5,1,2, addingReplicas=, removingReplicas=), Sensor-2 -> ReplicaAssignment(replicas=2,0,5, addingReplicas=, removingReplicas=), Sensor-3 -> ReplicaAssignment(replicas=3,5,4, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2022-05-12 17:03:19,959] INFO [Controller id=2] New partition creation callback for Sensor-1,Sensor-4,Sensor-0,Sensor-5,Sensor-2,Sensor-3 (kafka.controller.KafkaController)
[2022-05-12 17:03:23,133] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2022-05-12 17:03:23,133] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2022-05-12 17:03:23,135] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2022-05-12 17:03:23,136] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2022-05-12 17:03:23,136] DEBUG [Controller id=2] Topics not in preferred replica for broker 5 Map() (kafka.controller.KafkaController)
[2022-05-12 17:03:23,136] TRACE [Controller id=2] Leader imbalance ratio for broker 5 is 0.0 (kafka.controller.KafkaController)
[2022-05-12 17:03:23,136] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 Map() (kafka.controller.KafkaController)
[2022-05-12 17:03:23,136] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2022-05-12 17:03:23,136] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 Map() (kafka.controller.KafkaController)
[2022-05-12 17:03:23,136] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2022-05-12 17:03:23,136] DEBUG [Controller id=2] Topics not in preferred replica for broker 3 Map() (kafka.controller.KafkaController)
[2022-05-12 17:03:23,136] TRACE [Controller id=2] Leader imbalance ratio for broker 3 is 0.0 (kafka.controller.KafkaController)
[2022-05-12 17:03:23,136] DEBUG [Controller id=2] Topics not in preferred replica for broker 4 Map() (kafka.controller.KafkaController)
[2022-05-12 17:03:23,136] TRACE [Controller id=2] Leader imbalance ratio for broker 4 is 0.0 (kafka.controller.KafkaController)
[2022-05-12 17:04:08,884] INFO [Controller id=2] New topics: [Set(__consumer_offsets)], deleted topics: [Set()], new partition replica assignment [Set(TopicIdReplicaAssignment(__consumer_offsets,Some(ZTYa7WdbTPqf_UeoS5ObCw),Map(__consumer_offsets-22 -> ReplicaAssignment(replicas=5, addingReplicas=, removingReplicas=), __consumer_offsets-30 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-8 -> ReplicaAssignment(replicas=3, addingReplicas=, removingReplicas=), __consumer_offsets-21 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-4 -> ReplicaAssignment(replicas=5, addingReplicas=, removingReplicas=), __consumer_offsets-27 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-7 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-9 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-46 -> ReplicaAssignment(replicas=5, addingReplicas=, removingReplicas=), __consumer_offsets-25 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-35 -> ReplicaAssignment(replicas=4, addingReplicas=, removingReplicas=), __consumer_offsets-41 -> ReplicaAssignment(replicas=4, addingReplicas=, removingReplicas=), __consumer_offsets-33 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-23 -> ReplicaAssignment(replicas=4, addingReplicas=, removingReplicas=), __consumer_offsets-49 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-47 -> ReplicaAssignment(replicas=4, addingReplicas=, removingReplicas=), __consumer_offsets-16 -> ReplicaAssignment(replicas=5, addingReplicas=, removingReplicas=), __consumer_offsets-28 -> ReplicaAssignment(replicas=5, addingReplicas=, removingReplicas=), __consumer_offsets-31 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-36 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-42 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-3 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-18 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-37 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-15 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-24 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-38 -> ReplicaAssignment(replicas=3, addingReplicas=, removingReplicas=), __consumer_offsets-17 -> ReplicaAssignment(replicas=4, addingReplicas=, removingReplicas=), __consumer_offsets-48 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-19 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-11 -> ReplicaAssignment(replicas=4, addingReplicas=, removingReplicas=), __consumer_offsets-13 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-2 -> ReplicaAssignment(replicas=3, addingReplicas=, removingReplicas=), __consumer_offsets-43 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-6 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-14 -> ReplicaAssignment(replicas=3, addingReplicas=, removingReplicas=), __consumer_offsets-20 -> ReplicaAssignment(replicas=3, addingReplicas=, removingReplicas=), __consumer_offsets-0 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-44 -> ReplicaAssignment(replicas=3, addingReplicas=, removingReplicas=), __consumer_offsets-39 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-12 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-45 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-1 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-5 -> ReplicaAssignment(replicas=4, addingReplicas=, removingReplicas=), __consumer_offsets-26 -> ReplicaAssignment(replicas=3, addingReplicas=, removingReplicas=), __consumer_offsets-29 -> ReplicaAssignment(replicas=4, addingReplicas=, removingReplicas=), __consumer_offsets-34 -> ReplicaAssignment(replicas=5, addingReplicas=, removingReplicas=), __consumer_offsets-10 -> ReplicaAssignment(replicas=5, addingReplicas=, removingReplicas=), __consumer_offsets-32 -> ReplicaAssignment(replicas=3, addingReplicas=, removingReplicas=), __consumer_offsets-40 -> ReplicaAssignment(replicas=5, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2022-05-12 17:04:08,885] INFO [Controller id=2] New partition creation callback for __consumer_offsets-22,__consumer_offsets-30,__consumer_offsets-8,__consumer_offsets-21,__consumer_offsets-4,__consumer_offsets-27,__consumer_offsets-7,__consumer_offsets-9,__consumer_offsets-46,__consumer_offsets-25,__consumer_offsets-35,__consumer_offsets-41,__consumer_offsets-33,__consumer_offsets-23,__consumer_offsets-49,__consumer_offsets-47,__consumer_offsets-16,__consumer_offsets-28,__consumer_offsets-31,__consumer_offsets-36,__consumer_offsets-42,__consumer_offsets-3,__consumer_offsets-18,__consumer_offsets-37,__consumer_offsets-15,__consumer_offsets-24,__consumer_offsets-38,__consumer_offsets-17,__consumer_offsets-48,__consumer_offsets-19,__consumer_offsets-11,__consumer_offsets-13,__consumer_offsets-2,__consumer_offsets-43,__consumer_offsets-6,__consumer_offsets-14,__consumer_offsets-20,__consumer_offsets-0,__consumer_offsets-44,__consumer_offsets-39,__consumer_offsets-12,__consumer_offsets-45,__consumer_offsets-1,__consumer_offsets-5,__consumer_offsets-26,__consumer_offsets-29,__consumer_offsets-34,__consumer_offsets-10,__consumer_offsets-32,__consumer_offsets-40 (kafka.controller.KafkaController)
[2022-05-12 17:08:23,142] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2022-05-12 17:08:23,143] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2022-05-12 17:08:23,144] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2022-05-12 17:08:23,144] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2022-05-12 17:08:23,144] DEBUG [Controller id=2] Topics not in preferred replica for broker 5 Map() (kafka.controller.KafkaController)
[2022-05-12 17:08:23,144] TRACE [Controller id=2] Leader imbalance ratio for broker 5 is 0.0 (kafka.controller.KafkaController)
[2022-05-12 17:08:23,144] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 Map() (kafka.controller.KafkaController)
[2022-05-12 17:08:23,144] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2022-05-12 17:08:23,144] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 Map() (kafka.controller.KafkaController)
[2022-05-12 17:08:23,144] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2022-05-12 17:08:23,144] DEBUG [Controller id=2] Topics not in preferred replica for broker 3 Map() (kafka.controller.KafkaController)
[2022-05-12 17:08:23,144] TRACE [Controller id=2] Leader imbalance ratio for broker 3 is 0.0 (kafka.controller.KafkaController)
[2022-05-12 17:08:23,144] DEBUG [Controller id=2] Topics not in preferred replica for broker 4 Map() (kafka.controller.KafkaController)
[2022-05-12 17:08:23,144] TRACE [Controller id=2] Leader imbalance ratio for broker 4 is 0.0 (kafka.controller.KafkaController)
[2022-05-12 17:13:23,147] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2022-05-12 17:13:23,147] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2022-05-12 17:13:23,149] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2022-05-12 17:13:23,149] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2022-05-12 17:13:23,149] DEBUG [Controller id=2] Topics not in preferred replica for broker 5 Map() (kafka.controller.KafkaController)
[2022-05-12 17:13:23,149] TRACE [Controller id=2] Leader imbalance ratio for broker 5 is 0.0 (kafka.controller.KafkaController)
[2022-05-12 17:13:23,149] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 Map() (kafka.controller.KafkaController)
[2022-05-12 17:13:23,149] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2022-05-12 17:13:23,149] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 Map() (kafka.controller.KafkaController)
[2022-05-12 17:13:23,149] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2022-05-12 17:13:23,149] DEBUG [Controller id=2] Topics not in preferred replica for broker 3 Map() (kafka.controller.KafkaController)
[2022-05-12 17:13:23,149] TRACE [Controller id=2] Leader imbalance ratio for broker 3 is 0.0 (kafka.controller.KafkaController)
[2022-05-12 17:13:23,149] DEBUG [Controller id=2] Topics not in preferred replica for broker 4 Map() (kafka.controller.KafkaController)
[2022-05-12 17:13:23,149] TRACE [Controller id=2] Leader imbalance ratio for broker 4 is 0.0 (kafka.controller.KafkaController)
[2022-05-12 17:18:23,162] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2022-05-12 17:18:23,162] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2022-05-12 17:18:23,164] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2022-05-12 17:18:23,164] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2022-05-12 17:18:23,164] DEBUG [Controller id=2] Topics not in preferred replica for broker 5 Map() (kafka.controller.KafkaController)
[2022-05-12 17:18:23,164] TRACE [Controller id=2] Leader imbalance ratio for broker 5 is 0.0 (kafka.controller.KafkaController)
[2022-05-12 17:18:23,164] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 Map() (kafka.controller.KafkaController)
[2022-05-12 17:18:23,164] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2022-05-12 17:18:23,164] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 Map() (kafka.controller.KafkaController)
[2022-05-12 17:18:23,164] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2022-05-12 17:18:23,164] DEBUG [Controller id=2] Topics not in preferred replica for broker 3 Map() (kafka.controller.KafkaController)
[2022-05-12 17:18:23,164] TRACE [Controller id=2] Leader imbalance ratio for broker 3 is 0.0 (kafka.controller.KafkaController)
[2022-05-12 17:18:23,164] DEBUG [Controller id=2] Topics not in preferred replica for broker 4 Map() (kafka.controller.KafkaController)
[2022-05-12 17:18:23,164] TRACE [Controller id=2] Leader imbalance ratio for broker 4 is 0.0 (kafka.controller.KafkaController)
[2022-05-12 17:23:23,165] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2022-05-12 17:23:23,165] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2022-05-12 17:23:23,166] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2022-05-12 17:23:23,166] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2022-05-12 17:23:23,166] DEBUG [Controller id=2] Topics not in preferred replica for broker 5 Map() (kafka.controller.KafkaController)
[2022-05-12 17:23:23,166] TRACE [Controller id=2] Leader imbalance ratio for broker 5 is 0.0 (kafka.controller.KafkaController)
[2022-05-12 17:23:23,166] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 Map() (kafka.controller.KafkaController)
[2022-05-12 17:23:23,166] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2022-05-12 17:23:23,166] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 Map() (kafka.controller.KafkaController)
[2022-05-12 17:23:23,166] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2022-05-12 17:23:23,166] DEBUG [Controller id=2] Topics not in preferred replica for broker 3 Map() (kafka.controller.KafkaController)
[2022-05-12 17:23:23,166] TRACE [Controller id=2] Leader imbalance ratio for broker 3 is 0.0 (kafka.controller.KafkaController)
[2022-05-12 17:23:23,166] DEBUG [Controller id=2] Topics not in preferred replica for broker 4 Map() (kafka.controller.KafkaController)
[2022-05-12 17:23:23,166] TRACE [Controller id=2] Leader imbalance ratio for broker 4 is 0.0 (kafka.controller.KafkaController)
[2022-05-12 17:28:23,179] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2022-05-12 17:28:23,179] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2022-05-12 17:28:23,180] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2022-05-12 17:28:23,180] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2022-05-12 17:28:23,180] DEBUG [Controller id=2] Topics not in preferred replica for broker 5 Map() (kafka.controller.KafkaController)
[2022-05-12 17:28:23,180] TRACE [Controller id=2] Leader imbalance ratio for broker 5 is 0.0 (kafka.controller.KafkaController)
[2022-05-12 17:28:23,180] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 Map() (kafka.controller.KafkaController)
[2022-05-12 17:28:23,180] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2022-05-12 17:28:23,180] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 Map() (kafka.controller.KafkaController)
[2022-05-12 17:28:23,180] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2022-05-12 17:28:23,180] DEBUG [Controller id=2] Topics not in preferred replica for broker 3 Map() (kafka.controller.KafkaController)
[2022-05-12 17:28:23,180] TRACE [Controller id=2] Leader imbalance ratio for broker 3 is 0.0 (kafka.controller.KafkaController)
[2022-05-12 17:28:23,180] DEBUG [Controller id=2] Topics not in preferred replica for broker 4 Map() (kafka.controller.KafkaController)
[2022-05-12 17:28:23,180] TRACE [Controller id=2] Leader imbalance ratio for broker 4 is 0.0 (kafka.controller.KafkaController)
