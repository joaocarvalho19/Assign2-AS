/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package pa2_g22.UC1;
        
import java.io.IOException;
import java.net.ServerSocket;
import java.util.Properties;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerRecord;

/**
 *
 * @author joaoc
 */
public class PProducer extends Thread{
    // Port for the server socket.
    private final int SERVER_PORT = 1000;
    // Topic name.
    private final String TOPIC = "Sensor";
    
    Properties properties = new Properties();
    
    private final PProducerGUI prodGUI;
    
    KafkaProducer<String, String> producer;
    
    public PProducer(int serverPort) {
        
        //Open Gui
        prodGUI = new PProducerGUI();
        prodGUI.setVisible(true);
        
        properties.put("bootstrap.servers", "localhost:9092");
        properties.put("key.serializer", 
         "org.apache.kafka.common.serialization.StringSerializer");
         
        properties.put("value.serializer", 
         "org.apache.kafka.common.serialization.StringSerializer");
        
        // producer will not wait for any acknowledgment from the server at all. Records can be lost
        properties.put("acks", "0");
        
        // To limit the total memory that is available to the Java client for collecting unsent messages.
        properties.put("buffer.memory", 33554432); //default value
        
        // The compression for all data generated by the producer.   
        properties.put("compression.type", "none"); //default value 
        
        // How many times the producer will attempt to send a message before marking it as failed.
        properties.put("retries", 2147483647);   // Default. But it has no effect because "acks" = 0
        
        // It controls how many bytes of data to collect before sending messages to the Kafka broker.
        properties.put("batch.size", 16384); // Default value
        
        // Number of milliseconds a producer is willing to wait before sending a batch out.
        properties.put("linger.ms", 0);  // Default value
        
        // Time limit to wait for an acknowledgment of the success or failure to deliver a message.
        properties.put("delivery.timeout.ms", 120000); //Default value
                                                                                     
        producer = new KafkaProducer<>(properties);
    }
    
    @Override
    public void run() {  
           try { 
            ServerSocket listeningSocket = new ServerSocket(this.SERVER_PORT);
            while (true) {
	        new ClientHandler(listeningSocket.accept(), this).start();
	    }
	} catch (IOException e) {}
    }
    
    
    public void sendToTopic(String record){
        try{
            
            ProducerRecord<String, String> rec = new ProducerRecord<>(TOPIC, record);   // TOPIC | value: rec
            System.out.println("++++Producer - "+record);
            producer.send(rec);

            
        }catch(Exception e){
            System.out.println("Error tying to send record");
            System.err.println(e);
        }
    }
    
    public void appendRecord(String record){
        prodGUI.appendRecord(record);
    }
    public void incrTotalRecordsNum(){
        prodGUI.incrTotalRecordsNum();
    }
    public void incrSensorRecordsNum(int sensorID){
        prodGUI.incrSensorRecordsNum(sensorID);
    }
}
